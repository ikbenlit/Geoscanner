---
description: 
globs: 
alwaysApply: false
---
# Architecture Guide

## Frontend Architecture
- Next.js App Router voor routing
- Server Components voor data fetching
- Client Components voor interactiviteit
- Atomic Design voor componenten
- Tailwind CSS voor styling

## Backend Architecture
- Vercel Serverless Functions
- tRPC voor type-safe API
- Firebase Authentication
- Vercel Postgres voor data
- Upstash Redis voor caching

## Data Flow
1. Client initieert scan
2. Request gaat naar Vercel Edge
3. Scan job wordt in queue geplaatst
4. Serverless Functions verwerken scan
5. Resultaten worden opgeslagen
6. Client ontvangt real-time updates

## Module Structure
Elke analysemodule volgt dit patroon:
```typescript
interface ModuleResult {
  name: string;
  score: number;
  maxScore: number;
  percentage: number;
  status: 'success' | 'warning' | 'error';
  details: Record<string, unknown>;
  fixes: Fix[];
}
```

## Error Handling
- Gebruik error boundaries
- Implementeer fallback UI
- Log errors naar Sentry
- Geef gebruiksvriendelijke foutmeldingen
- Implementeer retry mechanismen

## Security
- Implementeer rate limiting
- Valideer alle input
- Gebruik Firebase Auth
- Implementeer CORS
- Beveilig API endpoints

## Performance
- Gebruik Edge caching
- Implementeer stale-while-revalidate
- Optimaliseer database queries
- Gebruik connection pooling
- Monitor performance metrics

